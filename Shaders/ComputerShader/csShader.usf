#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"

// float4 BoxFilter_4Tap(Texture2D<float4> tex, SamplerState samplerTex, float2 uv, float2 PixelSize)
// {
// 	float4 d = PixelSize.xyxy * float4(-1.0, -1.0, 1.0, 1.0);
//
// 	float4 s = 0;
// 	s = tex.SampleLevel(samplerTex, uv + d.xy, 0) * 0.25;  
// 	s += tex.SampleLevel(samplerTex, uv + d.zy, 0) * 0.25; 
// 	s += tex.SampleLevel(samplerTex, uv + d.xw, 0) * 0.25; 
// 	s += tex.SampleLevel(samplerTex, uv + d.zw, 0) * 0.25; 
//
// 	return s;
// }
//
// SamplerState SceneColorSampler;
// Texture2D<float4> SceneColorTexture;
// RWTexture2D<float4> OutputTexture;
//
// [numthreads(16, 16, 1)]
// void MainCS(uint3 DispatchThreadID : SV_DispatchThreadID) {
// 	uint2 TextureSize;
// 	SceneColorTexture.GetDimensions(TextureSize.x, TextureSize.y);
// 	const float2 UV = DispatchThreadID.xy / float2(TextureSize);
// 	const float2 PixelSize = 1.0 / float2(TextureSize) * 4;
// 	
// 	const float4 SceneColour = BoxFilter_4Tap(SceneColorTexture, SceneColorSampler, UV, PixelSize);
// 	OutputTexture[DispatchThreadID.xy] = SceneColour;
// }

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"

SamplerState SceneColorSampler;
Texture2D<float4> SceneColorTexture;
RWTexture2D<float4> OutputTexture;

// 定义线程组的大小
#define THREADS_X 16
#define THREADS_Y 16

// 定义共享内存大小
groupshared float4 SharedColors[THREADS_X + 2][THREADS_Y + 2];

[numthreads(THREADS_X, THREADS_Y, 1)]
void MainCS(uint3 DispatchThreadID : SV_DispatchThreadID, uint3 GroupThreadID : SV_GroupThreadID, uint3 GroupID : SV_GroupID)
{
    uint2 TextureSize;
    SceneColorTexture.GetDimensions(TextureSize.x, TextureSize.y);
    float2 PixelSize = 1.0 / float2(TextureSize);

    // 加载中心像素到共享内存
    SharedColors[GroupThreadID.x + 1][GroupThreadID.y + 1] = SceneColorTexture.SampleLevel(SceneColorSampler, DispatchThreadID.xy * PixelSize, 0);

    // 加载边界像素到共享内存
    if (GroupThreadID.x == 0) {
        SharedColors[0][GroupThreadID.y + 1] = SceneColorTexture.SampleLevel(SceneColorSampler, (DispatchThreadID.xy + uint2(-1, 0)) * PixelSize, 0);
    }
    if (GroupThreadID.x == THREADS_X - 1) {
        SharedColors[THREADS_X + 1][GroupThreadID.y + 1] = SceneColorTexture.SampleLevel(SceneColorSampler, (DispatchThreadID.xy + uint2(1, 0)) * PixelSize, 0);
    }
    if (GroupThreadID.y == 0) {
        SharedColors[GroupThreadID.x + 1][0] = SceneColorTexture.SampleLevel(SceneColorSampler, (DispatchThreadID.xy + uint2(0, -1)) * PixelSize, 0);
    }
    if (GroupThreadID.y == THREADS_Y - 1) {
        SharedColors[GroupThreadID.x + 1][THREADS_Y + 1] = SceneColorTexture.SampleLevel(SceneColorSampler, (DispatchThreadID.xy + uint2(0, 1)) * PixelSize, 0);
    }

    // 角落像素
    if (GroupThreadID.x == 0 && GroupThreadID.y == 0) {
        SharedColors[0][0] = SceneColorTexture.SampleLevel(SceneColorSampler, (DispatchThreadID.xy + uint2(-1, -1)) * PixelSize, 0);
    }
    if (GroupThreadID.x == THREADS_X - 1 && GroupThreadID.y == 0) {
        SharedColors[THREADS_X + 1][0] = SceneColorTexture.SampleLevel(SceneColorSampler, (DispatchThreadID.xy + uint2(1, -1)) * PixelSize, 0);
    }
    if (GroupThreadID.x == 0 && GroupThreadID.y == THREADS_Y - 1) {
        SharedColors[0][THREADS_Y + 1] = SceneColorTexture.SampleLevel(SceneColorSampler, (DispatchThreadID.xy + uint2(-1, 1)) * PixelSize, 0);
    }
    if (GroupThreadID.x == THREADS_X - 1 && GroupThreadID.y == THREADS_Y - 1) {
        SharedColors[THREADS_X + 1][THREADS_Y + 1] = SceneColorTexture.SampleLevel(SceneColorSampler, (DispatchThreadID.xy + uint2(1, 1)) * PixelSize, 0);
    }

    // 确保所有线程都加载完共享内存中的数据
    GroupMemoryBarrierWithGroupSync();

    // 执行 BoxFilter 操作
    float4 SceneColour = 0.25f * (
        SharedColors[GroupThreadID.x][GroupThreadID.y] +
        SharedColors[GroupThreadID.x + 2][GroupThreadID.y] +
        SharedColors[GroupThreadID.x][GroupThreadID.y + 2] +
        SharedColors[GroupThreadID.x + 2][GroupThreadID.y + 2]
    );

    // 将结果写入输出纹理
    OutputTexture[DispatchThreadID.xy] = SceneColour;
}