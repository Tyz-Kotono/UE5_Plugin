#include "/Engine/Private/Common.ush"
#include "/Engine/Public/Platform.ush"


float2 TextureSize;
SamplerState SceneColorSampler;
Texture2D<float4> SceneColorTexture;
float3 TargetColor;
float4 FinalColor;

void MainVertexS(
	in uint VertexID : SV_VertexID,
	out float4 OutPosition : SV_Position
)
{
	float2 positions[4] =
	{
		float2(-1.0f, -1.0f), 
		float2(-1.0f, 1.0f), 
		float2(1.0f, -1.0f),
		float2(1.0f, 1.0f)
	};
	
	OutPosition = float4(positions[VertexID], 0.0f, 1.0f);
}
float4 MainPixelS(float4 SvPosition : SV_POSITION) : SV_Target0
{
	// const float2 UV = SvPosition.xy / TextureSize;
	// const float4 SceneColour = SceneColorTexture.SampleLevel(SceneColorSampler, UV, 0);
	// return float4(1 - TargetColour, 1.0);
	// return float4(1,0,1, 1.0);
	return FinalColor;
	// return SvPosition;
}

float4 MainPS(float4 SvPosition : SV_POSITION) : SV_Target0
{
	const float4 SceneColour = SceneColorTexture.Load(int3(SvPosition.xy, 0));
	float3 FinalColor = SceneColour.rgb;

	uint width, height;
	SceneColorTexture.GetDimensions(width, height);
	float2 quarterSize = float2(width, height) / 2.0;
	
	float mask1 = step(quarterSize.x, SvPosition.x) * step(quarterSize.y, SvPosition.y);
	float mask2 = step(SvPosition.x, quarterSize.x) * step(SvPosition.y, quarterSize.y);
	float mask = mask1 + mask2;
	
	return lerp(float4(SceneColour), float4(FinalColor, 1.0), mask);
}